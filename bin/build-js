#!/usr/bin/env node

// Below is an example of basic es6 w/ browserify compilation. Adjust as needed.

// const UglifyJS = require('uglify-js');
// const fs = require('fs');
// const browserify = require('browserify');
// const watchify = require('watchify');
//
// const entry = 'app.js';
// const output = './src/www/main.js';
// const outputMin = './src/www/main.min.js';
//
// console.log('Starting app.js build. Environment: ' + process.env.NODE_ENV);
//
// const b = browserify(entry, {
//   debug: true,
//   sourceMaps: true,
//   cache: {},
//   packageCache: {},
//   plugin: [process.env.NODE_ENV !== 'production' ? watchify : null],
//   basedir: './src/app'
// })
//   .transform('babelify', {
//     plugins: [ ],
//     presets: [
//       'es2015',
//       'react'
//     ]
//   });
//
// function bundle() {
//   const stream = fs.createWriteStream(output);
//
//   const onComplete = (function() {
//     const begin = Date.now();
//
//     return function() {
//       console.log('Build complete in ' + (Date.now() - begin) / 1000 + 'secs');
//     };
//   })();
//
//   b.bundle()
//     .on('error', function(err) {
//       console.error(err);
//       this.emit('end');
//     })
//     .pipe(stream)
//
//   stream.on('finish', function() {
//     if (process.env.NODE_ENV === 'production') {
//       console.log('Complete, now compressing because production.');
//
//       const minified = UglifyJS.minify(fs.readFileSync(output, 'utf8'), {
//         // warnings: true,
//         compress: {
//           dead_code: true
//         }
//       });
//
//       if (minified.error) {
//         return console.error('UGLIFY Error:', minified.error);
//       }
//
//       fs.writeFileSync(outputMin, minified.code);
//       onComplete();
//
//     } else {
//       console.log('All done! (dev mode - not compressing)');
//       onComplete();
//     }
//   });
// }
//
// bundle();
//
// b.on('update', bundle);
